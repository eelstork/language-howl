@import "syntax-variables";

@li: 0.95;
@bg: @syntax-background-color;
@bg-lum: luma(@bg);

// Lowercase identifiers
.syntax--entity{ color: fade(@syntax-text-color, @li * 100%); }

// Uppercase identifiers
.syntax--entity.syntax--name.syntax--type.syntax--howl{
    color: contrast(@bg, mix(skyblue, @syntax-text-color, 90%) * @li,
                         black);
}

// Braces, parens (and currently, operators)
.syntax--punctuation.syntax--other{
    color: contrast(@bg, goldenrod * @li, darkblue);
}

// Control flow
.syntax--keyword{

    &.syntax--control{ color: contrast(@bg, gold * @li, red * 0.8); }

    &.syntax--class.syntax--other when (@bg-lum < 50%){
        color: deeppink;
        font-size: 105%;
        font-weight:bold !important;
        padding-bottom: 4px;
        border-bottom: 20px solid mix(firebrick, @bg, 70%);
    }

    &.syntax--class.syntax--other when (@bg-lum > 50%){
        color: tomato;
        font-size:110%  !important;
        border-bottom: 5px solid salmon;
    }

}  // end syntax--keyword

// Type modifiers
.syntax--storage{

    &.syntax--modifier when (@bg-lum > 50%){
        color: red;
        padding: 2px;
        background-color: darken(@bg, 3%);
        padding-bottom: 4px;
        border-top: 15px solid darken(@bg, 10%);;
    }

    &.syntax--modifier when (@bg-lum < 50%){
        color: dodgerblue;
        padding: 2px;
        background-color: mix(darkblue, @bg, 10%);
        padding-bottom: 4px;
        border-bottom: 21px solid mix(salmon, @bg, 15%);;
    }

}  // end syntax--storage

// ✓ and ✗
.syntax--bool{

    font-size: 105%;
    &.syntax--true  { color: contrast(@bg, mediumSeaGreen, green); }
    &.syntax--false { color: contrast(@bg, indianred, red); }

}

// The 'return' keyword
.syntax--keyword.syntax--control.syntax--return {
  color: contrast(@bg, desaturate(gold*@li, 75%)*1.8, red);
}
