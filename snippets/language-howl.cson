'.source.howl':
  'Using':
    prefix : 'using'
    body   : '⊐ '
  'Using static':
    prefix : 'usings'
    body   : '⊐̥ '
  'Namespace':
    prefix : 'namespace'
    body   : '⊓ '
  'Class':
    prefix : 'class'
    body   : '○ '
  'Delegate':
    prefix : 'delegate'
    body   : '𐋆 '
  'Enum':
    prefix : 'enum'
    body   : '⍥ '
  'Interface':
    prefix : 'interface'
    body   : '𐋂 '
  'Struct':
    prefix : 'struct'
    body   : '⊟ '
  'Public':
    prefix : 'public'
    body   : '‒ '
  'Protected':
    prefix : 'protected'
    body   : '◠ '
  'Internal':
    prefix : 'internal'
    body   : '︲ '
  'Protected internal':
    prefix : 'pri'
    body   : '︲̑ '
  'Private':
    prefix : 'private'
    body   : '▰ '
  'Public static':
    prefix : 'ps'
    body   : '‒̥ '
  'Protected static':
    prefix : 'prs'
    body   : '◠̥ '
  'Internal static':
    prefix : 'is'
    body   : '︲̥ '
  'Protected internal static':
    prefix : 'pris'
    body   : '︲̥̑ '
  'Private static':
    prefix : 'pvs'
    body   : '▰̥ '
  'Abstract':
    prefix : 'abstract'
    body   : '☋ '
  'Const':
    prefix : 'const'
    body   : 'ᴸ '
  'Override':
    prefix : 'override'
    body   : '⁺ '
  'Partial':
    prefix : 'partial'
    body   : 'ᴾ '
  'Readonly':
    prefix : 'readonly'
    body   : '⌷ '
  'Static':
    prefix : 'static'
    body   : '∘ '
  'Virtual':
    prefix : 'virtual'
    body   : 'ᵛ '
  'Sealed':
    prefix : 'sealed'
    body   : '🔒 '
  'If':
    prefix : 'if'
    body   : '⤴ '
  'Else':
    prefix : 'else'
    body   : '⤵ '
  'Else if':
    prefix : 'elif'
    body   : '⤳ '
  'Foreach':
    prefix : 'foreach'
    body   : '∀ '
  'In':
    prefix : 'in'
    body   : '∈ '
  'For':
    prefix : 'for'
    body   : '⟳ '
  'While':
    prefix : 'while'
    body   : '⟲ '
  'Continue;':
    prefix : 'continue'
    body   : '〰'
  'Switch':
    prefix : 'switch'
    body   : '⤭ '
  'Case':
    prefix : 'case'
    body   : '⥰ '
  'Default':
    prefix : 'default'
    body   : '～ '
  'Break;':
    prefix : 'break'
    body   : '¦'
  'When':
    prefix : 'when'
    body   : '⤏ '
  'Return':
    prefix : 'return'
    body   : '⮐ '
  'Try':
    prefix : 'try'
    body   : '↯ '
  'Catch':
    prefix : 'catch'
    body   : '⇤ '
  'Throw':
    prefix : 'throw'
    body   : '(╯°□°)╯ '
  'Finally':
    prefix : 'finally'
    body   : '(˙▿˙) '
  'Return true;':
    prefix : 'tt'
    body   : '㆑'
  'Return false;':
    prefix : 'ff'
    body   : '⤬'
  'Return null;':
    prefix : 'nn'
    body   : '⏂'
  'From':
    prefix : 'from'
    body   : '‖ '
  'Where':
    prefix : 'where'
    body   : '¿ '
  'Select':
    prefix : 'select'
    body   : '▸ '
  'Orderby':
    prefix : 'orderby'
    body   : '⏢ '
  'Ascending':
    prefix : 'ascending'
    body   : '◿ '
  'Descending':
    prefix : 'descending'
    body   : '◺ '
  'as (→)':
    prefix : 'as'
    body   : '→ '
  'equals (☰)':
    prefix : 'equals'
    body   : '☰ '
  'unequals (≠)':
    prefix : 'unequals'
    body   : '≠ '
  'greater or equals (≥)':
    prefix : 'greatero'
    body   : '≥ '
  'lesser or equals (≤)':
    prefix : 'lessero'
    body   : '≤ '
  'and (∧)':
    prefix : 'and'
    body   : '∧ '
  'or (∨)':
    prefix : 'or'
    body   : '∨ '
  'Operator':
    prefix : 'operator'
    body   : '⨕ ${1:⨀} ($2) '
  'Explicit type conversion':
    prefix : 'explicit'
    body   : '⒠ $1($2 ⧕) '
  'Implicit type conversion':
    prefix : 'implicit'
    body   : '⒤ $1($2 ⧕) '
  'Bool':
    prefix : 'bool'
    body   : 'ㅇ'
  'Byte':
    prefix : 'byte'
    body   : 'ᆨ'
  'Char':
    prefix : 'char'
    body   : 'ᆩ'
  'Short':
    prefix : 'short'
    body   : 'ᅮ'
  'Int':
    prefix : 'int'
    body   : 'ᆞ'
  'Long':
    prefix : 'long'
    body   : 'ᅭ'
  'Float':
    prefix : 'float'
    body   : 'ㅅ'
  'Double':
    prefix : 'double'
    body   : 'ㅆ'
  'Decimal':
    prefix : 'decimal'
    body   : 'ᄍ'
  'String':
    prefix : 'string'
    body   : 'ㄹ'
  'Object':
    prefix : 'object'
    body   : '⊡'
  'Var':
    prefix : 'var'
    body   : '∙ '
  'Get':
    prefix : 'get'
    body   : '╭{ $0 } '
  'Set':
    prefix : 'set'
    body   : '╰{ $0 } '
  'True':
    prefix : 'true'
    body   : '✓'
  'False':
    prefix : 'false'
    body   : '✗'
  'New':
    prefix : 'new'
    body   : '⌢ '
  'Null':
    prefix : 'null'
    body   : '∅'
  'This':
    prefix : 'this'
    body   : '⦿'
  'Void':
    prefix : 'void'
    body   : '┈ '
  'Params':
    prefix : 'params'
    body   : '⋯ '
  'Action<>':
    prefix : 'act'
    body   : '⒜'
  'Func<>':
    prefix : 'Func'
    body   : '⒡<${0:R}>'
  'Dictionary':
    prefix : 'Dictionary'
    body   : '𝕄'
  'HashSet':
    prefix : 'HashSet'
    body   : '𝕊'
  'Queue':
    prefix : 'Queue'
    body   : 'ℚ'
  'Stack':
    prefix : 'Stack'
    body   : '𝕂'
  'IEnumerator':
    prefix : 'IEnumerator'
    body   : '𝔼'
  'IEnumerable':
    prefix : 'IEnumerable'
    body   : '‡'
  'List':
    prefix : 'List'
    body   : '𝕃'
  'Sqrt':
    prefix : 'Sqrt'
    body   : '√'
  'Sum':
    prefix : 'Sum'
    body   : '∑'
  'Pi (3.14...)':
    prefix : 'pi3'
    body   : '𝛑'
  'Append':
    prefix : 'Append'
    body   : '±'
  'Contains':
    prefix : 'Contains'
    body   : '∋'
  'ContainsKey':
    prefix : 'ContainsKey'
    body   : '⋺'
  'Exists':
    prefix : 'Exists'
    body   : '∃'
  'Acceleration':
    prefix : 'acceleration'
    body   : '𝚊'
  'NominalAcceleration':
    prefix : 'nominalAcceleration'
    body   : '𝚊̱'
  'Density':
    prefix : 'density'
    body   : '𝒹'
  'Force':
    prefix : 'force'
    body   : '𝐹'
  'Mass':
    prefix : 'mass'
    body   : '𝓂'
  'Position':
    prefix : 'position'
    body   : '𝓅'
  'Speed':
    prefix : 'speed'
    body   : '𝝇'
  'NominalSpeed':
    prefix : 'nominalSpeed'
    body   : '𝑠̱'
  'Rotation':
    prefix : 'rotation'
    body   : '𝓇'
  'That':
    prefix : 'that'
    body   : '⧕'
  'Target':
    prefix : 'target'
    body   : '◍'
  'Torque':
    prefix : 'torque'
    body   : '𝜏'
  'Traction':
    prefix : 'traction'
    body   : '𝓽'
  'Velocity':
    prefix : 'velocity'
    body   : '𝓋'
  'Do':
    prefix : 'do'
    body   : '⎚ '
  '.Count':
    prefix : 'Count'
    body   : '⁝'
  '.Length':
    prefix : 'Length'
    body   : '❙'
  '.ToString()':
    prefix : 'ToString'
    body   : '🝠'
  '.ToArray()':
    prefix : 'ToArray'
    body   : '৴'
  '.Value':
    prefix : 'Value'
    body   : 'ᖾ'
  '(this,':
    prefix : 'xargs'
    body   : '【$0)'
  'Log.message =':
    prefix : 'logm'
    body   : '🐰 '
  'Log.warning =':
    prefix : 'logw'
    body   : '🐤 '
  'Log.error =':
    prefix : 'loge'
    body   : '🦞 '
  '[Test] public void':
    prefix : 'test'
    body   : '؟ '
  '[SetUp] public void':
    prefix : 'setup'
    body   : '⍜ '
  '[TearDown] public void':
    prefix : 'teardown'
    body   : '⍉ '
  'Assert.Throws':
    prefix : 'AssertT'
    body   : 'ಠᴗಠ<$1>( ⎚ $0 );'
  'GameObject':
    prefix : 'GameObject'
    body   : 'ロ'
  'Component':
    prefix : 'Component'
    body   : '⫙'
  'Transform':
    prefix : 'ttype'
    body   : 'エ'
  'Transform identifier':
    prefix : 'transform'
    body   : 'み'
  '.position':
    prefix : 'pposition'
    body   : '˙'
  '.rotation':
    prefix : 'rrotation'
    body   : '⁰'
  '.localScale':
    prefix : 'sscale'
    body   : 'ˢ'
  '.transform.localRotation':
    prefix : 'localRotation'
    body   : 'ʳ'
  '.transform.localPosition':
    prefix : 'localPosition'
    body   : 'ᵖ'
  '.lossyScale':
    prefix : 'lossyScale'
    body   : 'ˡ'
  'Quaternion':
    prefix : 'Quaternion'
    body   : 'ᇅ'
  'Vector2':
    prefix : 'v2'
    body   : 'フ'
  'Vector3':
    prefix : 'Vector3'
    body   : 'シ'
  'Vector4':
    prefix : 'v4'
    body   : 'タ'
  'Point2':
    prefix : 'p2'
    body   : 'ト'
  'Point3':
    prefix : 'Point3'
    body   : 'メ'
  'Point4':
    prefix : 'p4'
    body   : 'メ̂'
  'time':
    prefix : 'time'
    body   : '⒯'
  'deltaTime':
    prefix : 'deltaTime'
    body   : '𝛿𝚝'
  'Left':
    prefix : 'left'
    body   : '⊣'
  'Right':
    prefix : 'right'
    body   : '⊢'
  'Up':
    prefix : 'up'
    body   : '⊥'
  'Down':
    prefix : 'down'
    body   : '⊤'
  'Forward':
    prefix : 'forward'
    body   : '⫫'
  'Back':
    prefix : 'back'
    body   : '⫪'
  'Center':
    prefix : 'center'
    body   : '⟛'
  '.normalized':
    prefix : 'normalized'
    body   : '¹'
  '.magnitude':
    prefix : 'magnitude'
    body   : '❚'
  '.gameObject.name':
    prefix : 'gameObjectn'
    body   : 'ˮ'
  'AddComponent':
    prefix : 'AddComponent'
    body   : '《$0》'
  'GetComponent':
    prefix : 'GetComponent'
    body   : '⧼$0⧽'
  '[UnityTest] public IEnumerator':
    prefix : 'utest'
    body   : '⏚ '
  'Yield return new WaitForSeconds':
    prefix : 'yieldsec'
    body   : '⏰ '
  'Yield return null;':
    prefix : 'yieldnn'
    body   : '⩶ '
  'That.Logger.Log':
    prefix : 'log'
    body   : '🍥($"$0");'
  'That.Logger.Err':
    prefix : 'err'
    body   : '🔺($"$0");'
  'That.Logger.Warn':
    prefix : 'warn'
    body   : '🔸($"$0");'
  'Status':
    prefix : 'status'
    body   : '⑂ '
  'Action':
    prefix : 'action'
    body   : '▷ '
  'Done()':
    prefix : 'done'
    body   : '◇'
  'Cont()':
    prefix : 'cont'
    body   : '☡'
  'Fail()':
    prefix : 'fail'
    body   : '■'
  'Return done();':
    prefix : 'dd'
    body   : '◇̠'
  'Return cont();':
    prefix : 'cc'
    body   : '☡̱'
  'Return fail();':
    prefix : 'ff'
    body   : '■̠'
  'Return @void();':
    prefix : 'returnv'
    body   : '⌽'
  'Once()?[':
    prefix : 'Once'
    body   : '❰$0❱'
