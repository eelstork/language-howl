'.source.howl':
  'Using static':
    prefix : 'usings'
    body   : '‚äêÃ• '
  'Using':
    prefix : 'using'
    body   : '‚äê '
  'Namespace':
    prefix : 'namespace'
    body   : '‚äì '
  'Class':
    prefix : 'class'
    body   : '‚óã '
  'Interface':
    prefix : 'interface'
    body   : '‚óå '
  'Struct':
    prefix : 'struct'
    body   : '‚äü '
  'Public':
    prefix : 'public'
    body   : '‚Äí '
  'Protected':
    prefix : 'protected'
    body   : '‚ó† '
  'Internal':
    prefix : 'internal'
    body   : '‚ïå '
  'Protected internal':
    prefix : 'pri'
    body   : '‚ïç '
  'Private':
    prefix : 'private'
    body   : '‚ñ∞ '
  'Public static':
    prefix : 'ps'
    body   : '‚ÄíÃ• '
  'Protected static':
    prefix : 'prs'
    body   : '‚ó†Ã• '
  '‚äêÃ•':
    prefix : 'is'
    body   : '‚ïåÃ• '
  'Protected internal static':
    prefix : 'pris'
    body   : '‚ïçÃ• '
  'Private static':
    prefix : 'pvs'
    body   : '‚ñ∞Ã• '
  'Abstract':
    prefix : 'abstract'
    body   : '·¥¨ '
  'Const':
    prefix : 'const'
    body   : '·¥∏ '
  'Override':
    prefix : 'override'
    body   : '‚Å∫ '
  'Partial':
    prefix : 'partial'
    body   : '·¥æ '
  'Static':
    prefix : 'static'
    body   : '‚àò '
  'Virtual':
    prefix : 'virtual'
    body   : '·µõ '
  'Sealed':
    prefix : 'sealed'
    body   : 'üîí '
  'If':
    prefix : 'if'
    body   : '‚§¥ '
  'Else':
    prefix : 'else'
    body   : '‚§µ '
  'Else if':
    prefix : 'elif'
    body   : '‚§≥ '
  'Foreach':
    prefix : 'foreach'
    body   : '‚àÄ '
  'In':
    prefix : 'in'
    body   : '‚àà '
  'For':
    prefix : 'for'
    body   : '‚ü≥ '
  'While':
    prefix : 'while'
    body   : '‚ü≤ '
  'Continue;':
    prefix : 'continue'
    body   : '‚§í'
  'Switch':
    prefix : 'switch'
    body   : '‚§≠ '
  'Case':
    prefix : 'case'
    body   : '‚•∞ '
  'Break;':
    prefix : 'break'
    body   : '¬¶'
  'Return':
    prefix : 'return'
    body   : '‚Æê '
  'Try':
    prefix : 'try'
    body   : '‚ÜØ '
  'Catch':
    prefix : 'catch'
    body   : '‚á§ '
  'Throw':
    prefix : 'throw'
    body   : '(‚ïØ¬∞‚ñ°¬∞)‚ïØ '
  'Finally':
    prefix : 'finally'
    body   : '(Àô‚ñøÀô) '
  'From':
    prefix : 'from'
    body   : '‚Äñ '
  'Where':
    prefix : 'where'
    body   : '¬ø '
  'Select':
    prefix : 'select'
    body   : '·ç• '
  'As (=>)':
    prefix : 'as'
    body   : '‚Üí '
  'Eq':
    prefix : 'eq'
    body   : '‚ò∞ '
  'NEq':
    prefix : 'neq'
    body   : '‚â† '
  'GEq':
    prefix : 'geq'
    body   : '‚â• '
  'LEq':
    prefix : 'leq'
    body   : '‚â§ '
  'And':
    prefix : 'and'
    body   : '‚àß '
  'Or':
    prefix : 'or'
    body   : '‚à® '
  'Operator':
    prefix : 'operator'
    body   : '‚®ï '
  'Explicit':
    prefix : 'explicit'
    body   : '·µâ '
  'Implicit':
    prefix : 'implicit'
    body   : '‚Å± '
  'Bool':
    prefix : 'bool'
    body   : '„Öá'
  'Float':
    prefix : 'float'
    body   : '„ÖÖ'
  'Int':
    prefix : 'int'
    body   : '·Üû'
  'String':
    prefix : 'string'
    body   : '„Ñπ'
  'Object':
    prefix : 'object'
    body   : '‚ä°'
  'Double':
    prefix : 'double'
    body   : '„ÖÜ'
  'Get':
    prefix : 'get'
    body   : '‚ï≠{ $0 } '
  'Set':
    prefix : 'set'
    body   : '‚ï∞{ $0 } '
  'True':
    prefix : 'true'
    body   : '‚úì'
  'False':
    prefix : 'false'
    body   : '‚úó'
  'New':
    prefix : 'new'
    body   : '‚å¢ '
  'Var':
    prefix : 'var'
    body   : '‚àô '
  'Null':
    prefix : 'null'
    body   : '‚àÖ'
  'This':
    prefix : 'this'
    body   : '‚¶ø'
  'Void':
    prefix : 'void'
    body   : '‚îà '
  'Params':
    prefix : 'params'
    body   : '‚ãØ '
  'Action<>':
    prefix : 'Action'
    body   : '‚íú'
  'Func<>':
    prefix : 'Func'
    body   : '‚í°<${0:R}>'
  'Dictionary':
    prefix : 'Dictionary'
    body   : 'ùïÑ'
  'HashSet':
    prefix : 'HashSet'
    body   : 'ùïä'
  'List':
    prefix : 'List'
    body   : 'ùïÉ'
  'Append':
    prefix : 'Append'
    body   : '¬±'
  'Contains':
    prefix : 'Contains'
    body   : '‚àã'
  'ContainsKey':
    prefix : 'ContainsKey'
    body   : '‚ã∫'
  'That':
    prefix : 'that'
    body   : '‚ßï'
  'Do':
    prefix : 'do'
    body   : '‚éö '
  '.Count':
    prefix : 'Count'
    body   : '‚Åù'
  '.Length':
    prefix : 'Length'
    body   : '‚ùô'
  '.ToString()':
    prefix : 'ToString'
    body   : 'üù†'
  '.ToArray()':
    prefix : 'ToArray'
    body   : '‡ß¥'
  '(this,':
    prefix : 'xargs'
    body   : '„Äê$0)'
  '[Test] public void':
    prefix : 'test'
    body   : 'ÿü '
  '[SetUp] public void':
    prefix : 'setup'
    body   : '‚çú '
  '[TearDown] public void':
    prefix : 'teardown'
    body   : '‚çâ '
  'Assert.Throws':
    prefix : 'AssertT'
    body   : '‡≤†·¥ó‡≤†<$1>( ‚éö $0 );'
  'GameObject':
    prefix : 'GameObject'
    body   : '„É≠'
  'Component':
    prefix : 'Component'
    body   : '‚´ô'
  'Transform':
    prefix : 'Transform'
    body   : '„Ç®'
  'Quaternion':
    prefix : 'Quaternion'
    body   : '·áÖ'
  'Vector2':
    prefix : 'v2'
    body   : '„Éï'
  'Vector3':
    prefix : 'Vector3'
    body   : '„Ç∑'
  'Vector4':
    prefix : 'v4'
    body   : '„Çø'
  'Point2':
    prefix : 'p2'
    body   : '„Éà'
  'Point3':
    prefix : 'Vector3'
    body   : '„É°'
  'Point4':
    prefix : 'p4'
    body   : '„É°ÃÇ'
  'AddComponent':
    prefix : 'AddComponent'
    body   : '„Ää$0„Äã'
  'GetComponent':
    prefix : 'GetComponent'
    body   : '‚ßº$0‚ßΩ'
  '[UnityTest] public IEnumerator':
    prefix : 'utest'
    body   : '‚èö '
  'Yield return new WaitForSeconds':
    prefix : 'yieldsec'
    body   : '‚è∞ '
  'UnityEngine.Debug.Log':
    prefix : 'log'
    body   : 'üç•($"$0");'
  'UnityEngine.Debug.LogError':
    prefix : 'err'
    body   : 'üî∫($"$0");'
  'UnityEngine.Debug.LogWarning':
    prefix : 'err'
    body   : 'üî∏($"$0");'
  'Status':
    prefix : 'status'
    body   : '‚ëÇ '
  'Public action':
    prefix : 'publica'
    body   : '‚ñ∑ '
  'Private action':
    prefix : 'privatea'
    body   : '‚ñ∂ '
  'Done()':
    prefix : 'done'
    body   : '‚óá'
  'Cont()':
    prefix : 'cont'
    body   : '‚ò°'
  'Fail()':
    prefix : 'fail'
    body   : '‚ñ†'
  'Return @void();':
    prefix : 'returnv'
    body   : '‚åΩ'
